[
{
	"uri": "https://kuleuven-diepenbeek.github.io/appdev-course/android/",
	"title": "1. Android Essentials",
	"tags": [],
	"description": "",
	"content": " The Android Life Cycle: Activities Messaging between activities and apps: Intents Typical (master/detail) layouts and their adapters: Views Data storage: File and Network access Complex layouting: Fragments Embedded Hardware: Signals  "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/appdev-course/lang/",
	"title": "2. Language &amp; Support Tools",
	"tags": [],
	"description": "",
	"content": " The Kotlin Programming language Kotlin Examples Test Driven Development and mobile dev. Multiplatform mobile dev.  "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/appdev-course/extra/",
	"title": "3. Extra info",
	"tags": [],
	"description": "",
	"content": "Extra info  Installation guide Common errors FAQ Links and external tutorials Project information Need inspiration? A sample/demo project  "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/appdev-course/extra/install/",
	"title": "1. Installation Guide",
	"tags": [],
	"description": "",
	"content": "1. Downloading Android Studio Go to developer.android.com/studio and download the latest stable release of the Android Studio IDE (green button). It comes with a JDK version to compile the necessary Java/Kotlin files and automatically downloads the correct Gradle version depending on your project file.\nBear in mind that the installation will download the required Google Android Development Kit (SDK), chipping away yet another gigabyte form your download limit.\nRequired IDE disk space: 1.5 GB Required SDK disk space: 3.1 GB Required Gradle Lib disk space (usually in ~/.gradle): 1.4 GB Required Cache disk space (usually in ~/.android): 2.3 GB\nTotaling to about 8.5 GB!! You\u0026rsquo;ve been warned.\nBut I\u0026rsquo;m on a Mac! If you are on a modern Mac with an M1 chipset (AMD64), download the latest preview version via the correct link in the archive page: https://developer.android.com/studio/archive Select the \u0026ldquo;Beta build\u0026rdquo; (called Arctic Fox), not the Canary build. Be mindful of the chipset architecture, otherwise the emulator will not work.\nThe program will be installed in /Applications/Android Studio Preview.app, and the Android SDK will be downloaded in ~/Library/Android. The emulator cache will live in ~/.android.\nBut I\u0026rsquo;m on Linux! A few notes for Linux users:\n Do not boot the IDE as root: emulators will be installed in in /root/android and cannot be found (error message will be something like that). If you get an error \u0026ldquo;permission denied /dev/kvm\u0026quot;: Add your use to the kvm group using the command useradd \u0026lt;username\u0026gt; kvm. See https://developer.android.com/studio/run/emulator-acceleration on how to install the right packages in your distribution. Note that as of June 2021, ia32-libs-multiarch does not exist anymore and is not needed.  2. Starting your first app Building When you\u0026rsquo;re finally done with the download and installation procedure, boot up the IDE again and you should be greeted with a \u0026ldquo;New Project\u0026rdquo; screen. Choose Basic Activity from the Phone and Tablet template, press Next and choose a name/location. Leave language on Kotlin and choose API 26 Android 8.0 (Oreo) for your Minimum SDK (should be selected by default).\nAfter pressing Finish, Android Studio will auto-download the correct Gradle version and dependencies.\n  Selecting a new project  Try to build the project (top right: hammer icon, or from Build menu, or using shortcuts). It will take a while the first time.\nDeploying Try to deploy the project. Your virtual machine will probably not be installed/downloaded yet. Go to the AVD manager (top right, open up the second combobox, or using menu Tools \u0026ndash; AVD Manager).\nChoosing the right API and target for your virtual device is extremely important. Be sure to match your CPU architecture (x64/arm64/\u0026hellip;). Be sure to try and match the API version with the API version in your build.gradle targetSdk/compileSdk/buildToolsVersion to avoid compatibility issues.\n The virtual device will likely have to be downloaded first, usually into ~/.android/avd, where the .ini config file of the emulator also resides.\n  Go to the AVD Manager in the build tool menu button bar  After correctly configuring your virtual device (the resolutions and device type do not matter that much right now), press the Play button again (Run app: CTRL+R). Hopefully, after a while, the emulator will do a cold boot (you should see the Android/Google logo and a home screen), and after that your compiled app will load up.\nFiddling Try to alter a few things here and there to see if recompiling/redeploying works. Try to make yourself familiar with the project structure while you\u0026rsquo;re at it:\n|- app |- build |- libs |- src |- main |- java |- com |- exampletest MainActivity.kt SomeFragment.kt |- res |- drawable someimage.jpg ic_laumcher_background.xml |- layout activity_main.xml content_main.xml somefragment.xml |- menu menu_main.xml |- navigation nav_graph.xml |- values colors.xml strings.xml ... |- mipmap ... AndroidManifest.xml |- test |- java |- com |- exampletest SomeTest.kt |- androidTest |- java |- com |- exampletest ExampleInstrumentedTest.kt build.gradle proguard-rules.pro |- build |- gradle build.gradle gradle.properties settings.gradle local.properties gradlew A few different things to remember:\nGradle The toplevel build.gradle file should not be modified\u0026mdash;changes usually happen in the build.gradle file in your app folder (In Android Studio: \u0026ldquo;Module\u0026rdquo;).\nThe wrapper properties file should point to Gradle 7.x for Android projects.\nFor more information on Gradle, see the Software Engineering Skills: Java Gradle Projects lessons.\nCode In:\n src/main/java, as expected. src/test/java, as epected. These are your unit tests. src/androidTest/java\u0026mdash;woah, what\u0026rsquo;s this? These are android-instrumented specific tests that need to run on the device itself: usually UI-related tests. We\u0026rsquo;ll inspect thsese in the chapter on TDD.  Resources Android\u0026rsquo;s UIs are described instead of coded in accompanied .xml files. These live in app/src/res under subdirs layout, menu and navigation. See the Activities lesson to learn more about these files and their contents.\nFor now, go ahead and open up app/src/res/values/strings.xml. It should contain something like this:\n\u0026lt;resources\u0026gt; \u0026lt;string name=\u0026#34;app_name\u0026#34;\u0026gt;TestApp2\u0026lt;/string\u0026gt; \u0026lt;string name=\u0026#34;action_settings\u0026#34;\u0026gt;Settings\u0026lt;/string\u0026gt; \u0026lt;!-- Strings used for fragments for navigation --\u0026gt; \u0026lt;string name=\u0026#34;first_fragment_label\u0026#34;\u0026gt;First Fragment\u0026lt;/string\u0026gt; \u0026lt;string name=\u0026#34;second_fragment_label\u0026#34;\u0026gt;Second Fragment\u0026lt;/string\u0026gt; \u0026lt;string name=\u0026#34;next\u0026#34;\u0026gt;Next\u0026lt;/string\u0026gt; \u0026lt;string name=\u0026#34;previous\u0026#34;\u0026gt;Previous\u0026lt;/string\u0026gt; \u0026lt;string name=\u0026#34;hello_first_fragment\u0026#34;\u0026gt;Hello first fragment\u0026lt;/string\u0026gt; \u0026lt;string name=\u0026#34;hello_second_fragment\u0026#34;\u0026gt;Hello second fragment. Arg: %1$s\u0026lt;/string\u0026gt; \u0026lt;/resources\u0026gt; The resources can be accessed in the layout XMLs to put labels on buttons and re-use key/values. For example, a button can be defined as \u0026lt;Button ... android:text=\u0026quot;@string/next\u0026quot; .../\u0026gt;, referring to the label \u0026ldquo;Next\u0026rdquo; in the above XML.\nGo ahead and try to change the label of the example button to \u0026ldquo;Hello World!\u0026rdquo;. Go nuts.\nDouble-click on fragment_first.xml or activity_main.xml to see the UI editor. On the top right, you can see \u0026ldquo;Code | Split | Design\u0026rdquo;, to switch XML views, just like SceneBuilder in JavaFX. You do remember that from INF1, right?\nClick on Design and drag in a new ImageView from the Common palette. It will open a dialog called Pick a Resource. Press +, choose \u0026ldquo;Import Drawables\u0026rdquo;, ans select a random image file. Images are also described in XML and fairly complex: for each resolution a new one should be provided in case your app runs on a tablet/big screen/small screen/horizontal/vertical mode, etc. The name does not matter.\n  A nice test image for our test app.  Note that after adding the image, the following code was added in the XML of the fragment:\n\u0026lt;ImageView android:id=\u0026#34;@+id/imageView\u0026#34; android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:src=\u0026#34;@drawable/_ee2e58a037610e49f7165f1df0087e1\u0026#34; tools:layout_editor_absoluteX=\u0026#34;0dp\u0026#34; tools:layout_editor_absoluteY=\u0026#34;0dp\u0026#34; /\u0026gt; Redeploy your test app to verify if it works in your emulator.\nYay! Crackling fireworks! You\u0026rsquo;ve officially gained the right to proclaim It Works On My Machine.\nGetting to know the IDE Android Studio is part of JetBrains' IDEA development environment. That is, it behaves and functions exactly like its other products:\n CLion for cross-platform C/C++ development, used in the Software Design in C/C++ Course GoLand, the most complete Go-centric IDE IntelliJ IntelliJ, the well-respected Java-centered development environment, used in INF1/Software Engineering Skills  Shortcuts\nSince Android Studio is built on top of IntelliJ\u0026rsquo;s IDEA, the shortcut key keymaps are the same!\nHave a look at the IDEA Reference keymap card\nMore features\nConsult Meeting Android Studio at developer.android.com for a run-down on the User Interface and project structure guide of the IDE. This should be familiar to you, as you have used other JetBrains products in other courses in your engineering trajectory.\nTry to (re-)familiarize yourself with the tool by trying to:\n Quickly access a certain file/method/class Zooming in and out, and switching to presenter mode Auto-completing a code fragment Automatically generating a constructor and getters/setters Navigating to a test method Running unit tests and switching to the tests while navigating the production code Executing specific Gradle tasks Setting breakpoints and walking through these in debug mode \u0026hellip;  "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/appdev-course/android/activities/",
	"title": "1. Life Cycle - Activities",
	"tags": [],
	"description": "",
	"content": "What\u0026rsquo;s an activity?\n An activity is a single, focused thing that a user can do.\n "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/appdev-course/lang/kotlin/",
	"title": "1. The Kotlin programming lang.",
	"tags": [],
	"description": "",
	"content": "Why in Kotlin, Yet Another Language? Good question! The answer is multi-faceted:\n1. Because Google Says So Google says you should Develop Android apps with Kotlin. It\u0026rsquo;s their recommended way of doing so. They state:\n Write better Android apps faster with Kotlin. Kotlin is a modern statically typed programming language used by over 60% of professional Android developers that helps boost productivity, developer satisfaction, and code safety.\n Among a slew of listed advantages, they have also created an Android Basics in Kotlin course, where the basics of the Kotlin language is the first hurdle to take.\nThanks to Google\u0026rsquo;s push for Kotlin, open source Android projects on GitHub, GitLab, and friends have boomed, massively switching from Java to Kotlin. It is still possible to write Java-like code and mix in a bit of Kotlin here and there: that is one of the powers of a language on top of the JVM. It would make no sense for us to teach you Android development without touching upon Kotlin, as reading source code of bigger projects would become hard since they\u0026rsquo;re littered with Kotlin-specific syntax.\nTry navigating your way through a few of the following popular open source repositories:\n https://github.com/ccomeaux/boardgamegeek4android \u0026mdash; a BoardGameGeek client for Android https://gitlab.com/AuroraOSS/AuroraStore \u0026mdash; A Google Playstore Client https://github.com/owncloud/android \u0026mdash; The ownCloud Android App https://github.com/mrcsxsiq/Kotlin-Pokedex \u0026mdash; Gotta Catch \u0026lsquo;em All! Pokémon!  Simply search for \u0026ldquo;kotlin\u0026rdquo; and \u0026ldquo;android\u0026rdquo; on GitHub and you\u0026rsquo;ll find yourself wading knee-deep into modern and highly-maintained app source code.\nMoreover, troubleshooting using Google/Stack Overflow usually nets you Kotlin code, as it\u0026rsquo;s become that common. Yet another point in favor for learning Android app development \u0026ldquo;the recommended way\u0026rdquo;. We promise it won\u0026rsquo;t hurt a bit. Maybe only sting. Just a little bit.\n2. Because We Say So The software department of ACRO, the KU Leuven research group at Diepenbeek Campus, focuses on functional languages, of which Kotlin certainly fits the bill. Kotlin\u0026rsquo;s functional mechanics are nowhere near as complex as Prolog or Scala, and is familiar enough for students who are used to writing programs in Java. Thus, with relative little effort, a new (both for you and for the programming community) language can be learned.\nA Crash Course in Kotlin Roughly based upon Google\u0026rsquo;s Introduction to Kotlin crash course.\n1. Variables As mentioned before, Kotlin has many functional aspects to it. For variable declaration, you can pre-set a value, declaring it will never change (it\u0026rsquo;s a constant), or just call it a \u0026ldquo;variable\u0026rdquo;.\nfun main(args: Array\u0026lt;String\u0026gt;) { System.out.println(\u0026#34;Hi from Kotlin! the Main fun(ction) should be placed outside of a class. Strange, isn\u0026#39;t it? No? Hmm.\u0026#34;) var count1: Int = 10 count1++ var count2 := 10 count2++ val count3: Int = 10 count3++ // compile error  val count4 = 10 count4++ // compile error } This works just like in JavaScript: let (used to be var) and const.\nvalues cannot be changed: they\u0026rsquo;re values. What else is new? No ;\u0026mdash;finally! Note Kotlin has built-in type inference: specifying := Int is not needed, the compiler knows this since you provide a whole number on the right-hand side of the equation sign.\nSpot the new syntax in the next section:\nfun main(args: Array\u0026lt;String\u0026gt;) { var name: String = null // does not compile  name = \u0026#34;Wouter\u0026#34; var nameGood: String? = null nameGood = \u0026#34;Wouter\u0026#34; System.out.println(\u0026#34;My name is \u0026#34; + nameGood.orEmpty()) println(\u0026#34;My name is \u0026#34; + nameGood?.toLowerCase()) // without if check: use ?.  if(nameGood != null) { println(\u0026#34;My name surely is \u0026#34; + nameGood.toLowerCase()) // with if check: no ? after dot  } } This is called null safety. To assign null, you explicitly have to use the question mark ? sign. orEmpty() returns an empty string if the value it holds is effectively null. This method, or using var?. to access properties, omits needlessly checking with if(...) statements, complicating your codebase, such as the last two statements.\nAll standard JDK API methods are still available to you. Remember that you are still working on a Java-specific Virtual Machine. Thus, System.out.println() is still valid (but can be shortened to prinln(), imported from package kotlin.io), although you have to omit the ; at the end of the statement. So, in essence, you already know how to create threads, access files, \u0026hellip;! This is also very important in Android development, as many system-level Android API methods are still Java.\n 2. Conditionals if() is still if(), including the else. What\u0026rsquo;s more interesting, however, is the possibility of replacing your if-else expressions with a when expression:\nval answerString = when { count == 42 -\u0026gt; \u0026#34;I have the answer.\u0026#34; count \u0026gt; 35 -\u0026gt; \u0026#34;The answer is close.\u0026#34; else -\u0026gt; \u0026#34;The answer eludes me.\u0026#34; } println(answerString) Note that no ternary operator exists (val bla = d == 10 ? \u0026quot;jup\u0026quot; : \u0026quot;nah\u0026quot;).\n3. Classes and Functions Suppose we\u0026rsquo;d like to represent a pawn and its position. This is the Java way to do it:\npublic class Pawn { private int x; private int y; public Pawn(int x, int y) { this.x = x; this.y = y; } public int getX() { return x; } public int getY() { return y; } public void setX(int x) { this.x = x; } public void setY(int y) { this.y = y; } @Override public String toString() { return \u0026#34;(\u0026#34; + x + \u0026#34;,\u0026#34; + y + \u0026#34;)\u0026#34;; } } public class Main { public static void main(Stringp[] args) { Pawn p = new Pawn(1, 2); System.out.println(\u0026#34;p is at (\u0026#34; + p); } } While this is the Kotlin way:\nclass Pawn(theX: Int, theY: Int) { var x = theX private set var y = theY override fun toString(): String { return \u0026#34;($x,$y)\u0026#34; } } fun main(args: Array\u0026lt;String\u0026gt;) { val p = Pawn(1, 2) println(\u0026#34;p is at $p\u0026#34;) } That\u0026rsquo;s a lot shorter! What happened here?\n We create a class with a constructor\u0026mdash;on the same line. class Pawn { ... } would work just as well, but everything between () are constructor arguments. That means we can immediately use them in the assignments of the variables. Properties of the class are by default public! So p.y = 346 would be valid, but to countermeasure this, we set the setter to private. There are no \u0026ldquo;getter\u0026rdquo; and \u0026ldquo;setter\u0026rdquo; methods needed this way! Remember to put the main() function outside any class. No separate (static) class needed for that. String interpolation exists in Kotlin. Within double quotes, you can access a variable using the $ prefix.  What is called a secondary constructor can still be made, using the more \u0026ldquo;classic\u0026rdquo; approach:\nclass Pawn { var x = 0 constructor(x: Int) { this.x = x } } However, this is to be avoided if only one constructor is sufficient.\nAs for defining functions, just fun name() {} suffices. Functions are public by default, contrary to Java\u0026rsquo;s package-access! Adding protected/private before fun prevents this.\n Want arguments? fun name(arg1: Type, arg2: Type). Want default arguments? fun name(arg1: Boolean = true) Want varargs? fun name(vararg bools: Boolean) Want a return type? fun name(): Type. (Note that void is Unit in Kotlin) Want to call the function? name(false) Want to name arguments while calling? name(arg1: false)  More information about unit-returning functions can be found here.\n4. Arrays, Collections, Looping Kotlin\u0026rsquo;s Array\u0026lt;\u0026gt; generic class is the same as a [] in Java: it\u0026rsquo;s set in size. Most of the time we\u0026rsquo;ll want to use Java\u0026rsquo;s ArrayList\u0026lt;\u0026gt; equivalent. Kotlin also leverages interfaces to hide the collection implementation. You will see MutableList\u0026lt;\u0026gt; often:\nclass Stuff(name: String) { val name = name override fun toString(): String { return name } } class Bag { val items: MutableList\u0026lt;Stuff\u0026gt; = mutableListOf(Stuff(\u0026#34;pen\u0026#34;), Stuff(\u0026#34;apple\u0026#34;)) }  Remember, as soon as you initialize an object and do not want to change it, use val instead of var. The list will grow and shrink in size as things get added and removed, but the reference to items, the list instance itself, will not change. That is, items = ArrayList\u0026lt;Stuff\u0026gt;(), which creates a new empty list, is something we don\u0026rsquo;t want to see somewhere in the code.\n Now that we have a bag of items, how do we print out each one? Add the following function to Bag:\nfun rummageThrough() { // option 1  for(item in items) { println(item) } // option 2  items.forEach { println(it) } } The second function is the functional option where we pass in a closure that prints an item. The only argument is automatically available as it. This is how the forEach function is defined in _Collections.kt:\npublic inline fun \u0026lt;T\u0026gt; Iterable\u0026lt;T\u0026gt;.forEach(action: (T) -\u0026gt; Unit): Unit { for (element in this) action(element) } Kotlin provides The Usual Suspects of functional loop tools, such as:\n .filter {} .reduce {} .sumOf {} .removeIf {} .replaceAll {} \u0026hellip;  To initialize arrays/lists/whatever, Kotlin provides handy utility methods so that we don\u0026rsquo;t need to do silly plumbing as we\u0026rsquo;re used to do in Java. For instance, in Java, creating an ArrayList and adding stuff using new ArrayList\u0026lt;Bag\u0026gt;() { add(new Bag(\u0026quot;apple\u0026quot;); add... } is sometimes shortened using Arrays.asList(). In Kotlin, we simply rely on mutableListOf(Bag(\u0026quot;apple\u0026quot;)), arrayOf(...), arrayListOf(...), etc.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/appdev-course/extra/faq/",
	"title": "2. Common Errors FAQ",
	"tags": [],
	"description": "",
	"content": "1. minSdkVersion mismatch Error:\n \u0026ldquo;Expected minSdkVersion \u0026gt;= 21 but found 1\u0026rdquo;\n Cause: mismatch in build.gradle of android SDK and configured SDK in your emulator.\nSolution: just keep these the same. The error disappeared here after selecting for example 30/30.\n2. Emulator process was killed? Error:\n Emulator: process was killed\n Cause: a hundred different things. Consult the Android Studio error log for more details\u0026mdash;these aren\u0026rsquo;t displayed in the IDE. Either pick Help \u0026ndash; show Log (or show Log in Finder if you\u0026rsquo;re on a Mac), or locate it on the HDD (Mac: ~/Logs/Google/AndroidStudioPreviewX, Win: C:\\Users\\\u0026lt;name\u0026gt;\\.AndroidStudioX\\system\\log)\nFind the process was killed message, and you\u0026rsquo;ll likely see another error that caused that one. For instance:\n Too little disk space. Logged in as root user in Linux. .ini file could not be found. x86 emulator installed on an x64-architecture system Apple M1 silicon-related errors if you did not install the latest preview edition.  3. Virtualization HAXVM-related errors Error:\n Unable to install Intel® HAXM\n Or:\n Your CPU does not support VT-x.\n Or:\n Unfortunately, your computer does not support hardware accelerated virtualization.\n Cause 1: Are you on a Mac M1 and did you install the latest release instead of the preview release? You need to download an Android Virtual Device based on an ARM systems image. This is done automatically in the latest preview edition of Android Studio. See installation guide.\nCause 2: Are you on a 64-bit system but did you install 32-bit emulators or components? Pay careful attention to the processor architecture of the installation and your machine\u0026mdash;these should match!\n4. Invalid Entry CRC while deploying Error:\n Failed to transform material-1.3.0.aar invalid entry CRC expected 0x9797\u0026hellip; but got 0x48546\u0026hellip;.\n Cause: I have no idea, and Google/Stack Overflow doesn\u0026rsquo;t seem to know either. It happens sometimes after building and deploying. The emulator boots, but the app won\u0026rsquo;t load in the emulator.\nSolution: Rebuild. Do not restart the emulator, just leave it open. Simply rebuilding seems to fix this problem.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/appdev-course/lang/kotlin-examples/",
	"title": "2. Kotlin Examples/Exercises",
	"tags": [],
	"description": "",
	"content": "All examples can be found in the GitHub repository of this very course, at https://github.com/KULeuven-Diepenbeek/appdev-course/tree/main/examples\nWe\u0026rsquo;ll be using IntelliJ to create simple Kotlin projects, so leave Android Studio closed for the moment. While creating a new project, choose\n A Gradle style project, Enable the Kotlin DSL Build Script, and finally Check Kotlin/JVM (uncheck Java)    New Project settings for Kotlin  Wait for the initial Gradle download/build to finish. Create your Kotlin class/source files in src/main/kotlin. Do not forget creating the correct package structure. See the examples in the above GitHub link.\n1. Taxi Driving: Basic Kotlin syntax Remember the taxi exercise from INF1 last year? The one in BlueJ that teaches you about object composition?\n Model a taxi company. The company can hire drivers, buy cars, and ultimately, drive clients from an address in point A to point B, to hopefully make some money.\n This is simple enough in Java and teaches you how to:\n Create classes Link classes together (a TaxiFirm holds a reference to one or more Cars and Drivers) Create lists of things (extra) Define methods to call other methods on member variables Think about accessibility, constructors and getters/setters  First, take a look at the java solution. Then, try to do it yourself in the Kotlin JVM. If all else fails, peek at the provided solution.\n2. Walking in JFX: Java interoperability Remember the basic JavaFX exercises from INF1, where we created a smiley or person, virtually walking around on the screen? Those labs acted as a first acquaintance with the JavaFX and Movel-View-Controller concepts. The assignment was as follows:\n Create a custom Region and render a simple person consisting out of multiple rectangles. Create buttons up/down/left/right and implement the click events such that the person moves around on the screen in the correct direction.\n This teaches you how to:\n Adhere to the Model-View-Controller pattern Create an AnchorPane and put stuff onto it using SceneBuilder Catch and implement events in the controller Draw custom things in the view Decouple the model from UI logic  If that doesn\u0026rsquo;t refresh your memory, take a look at the java solution. Then, try to do it yourself in the Kotlin JVM. If all else fails, peek at the provided solution.\nSince this is a JavaFX Gradle application, it cannot be started by pressing the play button: the JavaFX module options should be passed along. We rely on the org.openjfx.javafxplugin for this: see the build.gradle file. To run the application, execute the Gradle task application \u0026ndash; run.\n "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/appdev-course/android/intents/",
	"title": "2. Messaging - Intents",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/appdev-course/lang/tdd/",
	"title": "2. Test Driven Development",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/appdev-course/android/views/",
	"title": "3. Layouts - Views",
	"tags": [],
	"description": "",
	"content": "Responsive design TODO geen px maar sd\nRecyclerView "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/appdev-course/extra/links/",
	"title": "3. Links and Tutorials",
	"tags": [],
	"description": "",
	"content": "Tutorials  Official Android Developer Guide CodePath Android Cliffnotes Tutorialspoint.com Android Tutorial Vogella.com Android Development Tutorials  Advanced Android UI Concepts  Android Widgets on the home screen Drag-and-drop systems Notifications  "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/appdev-course/lang/multiplatform/",
	"title": "3. Multiplatform Mobile dev.",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/appdev-course/android/data-storage/",
	"title": "4. Data Storage - File/Network",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/appdev-course/extra/project/",
	"title": "4. Project Information",
	"tags": [],
	"description": "",
	"content": "Minimum requirements Every App should at minimum contain the following:\n Three activities: 1 master, 1 detail, 1 config screen One data request + parsing (HTTP GET Request) Use a RecyclerView Use at least one Intent Have a Menu with at least one option Use responsive design (do not hardcode px but use sp or dp) Use Fragments to vary the interface between landscape/portrait mode Use a data signal (GPS, Camera, accelerometer, \u0026hellip;) 9 Contain at least one extra feature you can freely choose. For instance, data storage through SQLite/Firebase/Room, authentication through Google/Firebase/email-pwd, sharing data using a ContentProvider, etc\u0026hellip; See links for more inspiration on what\u0026rsquo;s possible.  Deadlines TODO team formation/checkins/git/\u0026hellip;\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/appdev-course/android/fragments/",
	"title": "5. Complex layouting - Fragments",
	"tags": [],
	"description": "",
	"content": "What\u0026rsquo;s a fragment? Extend from Fragment from package androidx.fragment.app.\nWhy use it? Reusability\n  src: componentdriven.org  "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/appdev-course/extra/demo/",
	"title": "5. Demo Project",
	"tags": [],
	"description": "",
	"content": "TODO howlongtobeat achtig iets?\n Een Java-only en een Kotlin-only app? Een multiplatform gebaseerd op Kotlin\u0026rsquo;s platform? Een React-native gelijkaardige?  "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/appdev-course/android/signals/",
	"title": "6. Embedded Signals",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/appdev-course/",
	"title": "Course Contents",
	"tags": [],
	"description": "",
	"content": "    App Development See UHasselt ECTS Sheet\nLast changes for academic year 2020 - 2021.\nCourse notes 1. Android Essentials  The Android Life Cycle: Activities Messaging between activities and apps: Intents Typical (master/detail) layouts and their adapters: Views Data storage: File and Network access Complex layouting: Fragments Embedded Hardware: Signals  2. Language \u0026amp; Support Tools  The Kotlin Programming language Kotlin Examples Test Driven Development and mobile dev. Multiplatform mobile dev.  3. Extras  Installation guide Common errors FAQ Links and external tutorials Project information Need inspiration? A sample/demo project  Syllabus  Teachers: Coordinating Responsible: prof. dr. Kris Aerts - kris.aerts@kuleuven.be Assistant: Wouter Groeneveld - wouter.groeneveld@kuleuven.be Office: Technologiecentrum Diepenbeek, Groep ACRO, D.0.35.  Good-to-know What you should know before starting this course:\n Knowledge of object-oriented software development. Knowledge of the Java programming language.  What you should have learned after completing this course:\n The ecosystem and life cycle of a mobile (Android-based) app and how to tackle the development. The role of the different components in app development and being able to choose one over the other depending on the context. Basic knowledge of the Kotlin programming language. Basic knowledge of the technical Android API. Unit testability of mobile applications. Basic knowledge of multi-platform possiblities in the app development world. drawing up a project plan/analysis for mobile development projects.  Course planning See the menu to the left. This course is worth 3.0 ECTS points, hence it will be divided into 12 chunks (weeks) of 1.5h contact moments each. Extra coaching sessions will be planned if required.\nThe course lies in the second semester of the second year and has quite a bit of overlap with other software-related courses happening at the same time, specifically Software Engineering Skills (SES). During the SES lessons, we\u0026rsquo;ll get to know design patterns and unit testing, which will also be applied in this very course.\nEvaluation  No formal exam planned. An android-based project which will have to be defended orally to motivate the taken design and implementation decisions. Open questions will be asked to gauge the knowledge level of the student.  More learning material See the section \u0026ldquo;Extra\u0026rdquo; in the menu or in the links above. Each section will contain a \u0026ldquo;More learning material\u0026rdquo; part at the bottom of each page linking to supplemental bits and pieces for the curious student.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/appdev-course/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]